{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Blitz","text":"<p> \u26a1\ufe0f Lightspeed API builder \u26a1\ufe0f </p>"},{"location":"#what-is-blitz","title":"What is Blitz ?","text":"<p>Blitz is a tool that build restfull API on the fly based on a simple and easy to maintain configuration file.</p> <p>Here is an example of how simple a Blitz file is:</p> YamlJson <pre><code>config:\n  name: Hello world\n  description: Here is a simple blitz configuration file.\n  version: 0.1.0\nresources:\n  TodoList:\n    name: str\n    description: str\n  Todo:\n    name: str\n    due_date: str\n    todo_list_id: TodoList.id\n    todo_list: TodoList\n</code></pre> <pre><code>{\n  \"config\": {\n    \"name\": \"Hello world\",\n    \"description\": \"Here is a simple blitz configuration file.\",\n    \"version\": \"0.1.0\"\n  },\n  \"resources\": {\n    \"TodoList\": {\n      \"name\": \"str\",\n      \"description\": \"str\"\n    },\n    \"Todo\": {\n      \"name\": \"str\",\n      \"due_date\": \"str\",\n      \"todo_list_id\": \"TodoList.id\",\n      \"todo_list\": \"TodoList\"\n    }\n  }\n}\n</code></pre>"},{"location":"#installation","title":"Installation","text":""},{"location":"#using-pipx-recommanded","title":"Using pipx (recommanded)","text":"<pre><code>pipx install git+https://github.com/Paperz-org/blitz.git@v0.2.0\n</code></pre>"},{"location":"#quickstart","title":"Quickstart","text":""},{"location":"#create-a-demo-blitz-app","title":"Create a demo blitz app","text":"<pre><code>blitz create --demo\n</code></pre> <pre><code>$ blitz create --demo\n\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;Demo Blitz App&lt;/span&gt; created successfully !\nTo start your app, you can use:\n    &lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;blitz start demo-blitz-app&lt;/span&gt;\n</code></pre>"},{"location":"#start-the-demo","title":"Start the demo","text":"<pre><code>blitz start\n</code></pre> <pre><code>$ blitz start\n\n&lt;span style=\"color: yellow; font-weight: bold;\"&gt;This is still an alpha. Please do not use in production.&lt;/span&gt;\n&lt;span style=\"color: yellow; font-weight: bold;\"&gt;Please report any issues on https://github.com/Paperz-org/blitz&lt;/span&gt;\n\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;Blitz app deployed.&lt;/span&gt;\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;  - Blitz UI            : &lt;a style=\"cursor: pointer\" href=\"http://0.0.0.0:8100\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;http://0.0.0.0:8100&lt;/a&gt;&lt;/span&gt;\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;  - Blitz admin         : &lt;a style=\"cursor: pointer\" href=\"http://0.0.0.0:8100/admin\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;http://0.0.0.0:8100/admin&lt;/a&gt;&lt;/span&gt;\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;  - Swagger UI          : &lt;a style=\"cursor: pointer\" href=\"http://0.0.0.0:8100/api/docs\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;http://0.0.0.0:8100/api/docs&lt;/a&gt;&lt;/span&gt;\n\n&lt;span style=\"color: lightblue; font-weight: bold;\"&gt;INFO&lt;/span&gt;      random-blitz-app Started server process [21292026]\n&lt;span style=\"color: lightblue; font-weight: bold;\"&gt;INFO&lt;/span&gt;      random-blitz-app Waiting for application startup.\n&lt;span style=\"color: lightblue; font-weight: bold;\"&gt;INFO&lt;/span&gt;      random-blitz-app Application startup complete.\n</code></pre>"},{"location":"#enjoy-the-demo","title":"Enjoy the demo","text":"<p>The blitz demo already includes resources to explore all the functionalities of Blitz. You can see the Dashboard of the demo blitz app in our Live Demo.</p>"},{"location":"#create-a-blitz-app","title":"Create a blitz app","text":"<pre><code>blitz create\n</code></pre> <pre><code>$ blitz create\nEnter the name of your blitz app (Random Blitz App):\n// My First App\nEnter the description of your blitz app ():\n// this is my first blitz app\nChoose the format of the blitz file [json/yaml] (yaml):\n// yaml\n\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;My First App&lt;/span&gt; created successfully !\nTo start your app, you can use:\n    &lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;blitz start my-first-app&lt;/span&gt;\n</code></pre> <p>And yeah, that's it.</p> <p>Want to master Blitz?</p> <p>You can learn here how to create resources.</p> <p>Just add some resources in the blitz file, and you now have a fully functional API and the corresponding database schema, along with all the modern features you can expect from a modern app like:</p> <ul> <li>Automatic Swagger UI for the API</li> <li>Admin Interface</li> <li>Dashboard: including GPT builder, Blitz file editor, logs ...</li> <li>Data Validation and Error Messages (thanks to Fastapi and SQLModel)</li> <li>Automatic Database Migration</li> <li>Generated ERD Diagram</li> <li>and more...</li> </ul>"},{"location":"dashboard/","title":"Dashboard","text":"<p>Warning</p> <p>WORK IN PROGRESS</p>"},{"location":"features/","title":"Features","text":"<p>Powered by FastAPI, Pydantic and SQLModel.</p>"},{"location":"features/#crud-api","title":"CRUD API","text":"<p>Get a CRUD API from your data description in the Blitz file.</p>"},{"location":"features/#automatic-swagger","title":"Automatic swagger","text":"<p>Get a swagger UI for all you routes with automatic documentation.</p>"},{"location":"features/#database-management","title":"Database management","text":"<p>Internally manages database schema and generates data migration to keep your database up to date with your Blitz file.</p>"},{"location":"features/#dashboard-admin","title":"Dashboard &amp; Admin","text":"<p>Use the intuitive dashboard to build your Blitz app, manage your data and test your API.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#using-pipx-recommanded","title":"Using pipx (recommanded)","text":"<pre><code>pipx install git+https://github.com/Paperz-org/blitz.git@v0.2.0\n</code></pre>"},{"location":"api/","title":"API","text":"<p>The Blitz API contains all the exposed CRUD operations defined on the Blitz File, but also the <code>/blitz-file</code> which is, as its name suggests, the Json representation of the running Blitz File.</p> <p>This feature is used for the clone command and the --url option of the start command.</p> <p>This feature can be disabled with the <code>--no-config-route</code> option of the start command.</p> <p>For exemple, this is the return of the demo <code>/blitz-file</code>:</p> <pre><code>{\n    \"config\":{\n        \"name\":\"Demo Blitz App\",\n        \"description\":\"This is a demo blitz app\",\n        \"version\":\"0.1.0\"\n    },\n    \"resources\":{\n        \"Food\":{\n            \"name\":{\n                \"type\":\"str\",\n                \"nullable\":false,\n                \"unique\":true\n            },\n            \"expiration_date\":{\n                \"type\":\"datetime\",\n                \"nullable\":false,\n                \"unique\":false\n            }\n        },\n        \"Ingredient\":{\n            \"food_id\":{\n                \"type\":\"uuid\",\n                \"foreign_key\":\"Food.id\",\n                \"nullable\":true,\n                \"unique\":false\n            },\n            \"food\":{\n                \"type\":\"relationship\",\n                \"relationship\":\"Food\",\n                \"relationship_list\":false,\n                \"nullable\":false,\n                \"unique\":false\n            },\n            \"recipe_id\":{\n                \"type\":\"uuid\",\n                \"foreign_key\":\"Recipe.id\",\n                \"nullable\":true,\n                \"unique\":false\n            },\n            \"recipe\":{\n                \"type\":\"relationship\",\n                \"relationship\":\"Recipe\",\n                \"relationship_list\":false,\n                \"nullable\":false,\n                \"unique\":false\n            }\n        },\n        \"Recipe\":{\n            \"name\":{\n                \"type\":\"str\",\n                \"nullable\":false,\n                \"unique\":true\n            },\n            \"ingredients\":{\n                \"type\":\"relationship\",\n                \"relationship\":\"Ingredient\",\n                \"relationship_list\":true,\n                \"nullable\":false,\n                \"unique\":false\n            },\n            \"cook_id\":{\n                \"type\":\"uuid\",\n                \"foreign_key\":\"Cook.id\",\n                \"nullable\":true,\n                \"unique\":false\n            },\n            \"cook\":{\n                \"type\":\"relationship\",\n                \"relationship\":\"Cook\",\n                \"relationship_list\":false,\n                \"nullable\":false,\n                \"unique\":false\n            }\n        },\n        \"Cook\":{\n            \"name\":{\n                \"type\":\"str\",\n                \"nullable\":false,\n                \"unique\":true\n            },\n            \"age\":{\n                \"type\":\"int\",\n                \"nullable\":false,\n                \"unique\":false\n            },\n            \"recipes\":{\n                \"type\":\"relationship\",\n                \"relationship\":\"Recipe\",\n                \"relationship_list\":true,\n                \"nullable\":false,\n                \"unique\":false\n            },\n            \"rat\":{\n                \"type\":\"relationship\",\n                \"relationship\":\"Rat\",\n                \"relationship_list\":false,\n                \"nullable\":false,\n                \"unique\":false\n            }\n        },\n        \"Rat\":{\n            \"name\":{\n                \"type\":\"str\",\n                \"nullable\":false,\n                \"unique\":true\n            },\n            \"age\":{\n                \"type\":\"int\",\n                \"nullable\":false,\n                \"unique\":false\n            },\n            \"cook_id\":{\n                \"type\":\"uuid\",\n                \"foreign_key\":\"Cook.id\",\n                \"nullable\":true,\n                \"unique\":true\n            },\n            \"cook\":{\n                \"type\":\"relationship\",\n                \"relationship\":\"Cook\",\n                \"relationship_list\":false,\n                \"nullable\":false,\n                \"unique\":false\n            }\n        }\n    }\n}\n</code></pre> <p>Want to master the syntax of Blitz?</p> <p>You can learn here how the Blitz File work.</p>"},{"location":"blitzfile/","title":"Overview","text":"<p>Warning</p> <p>Please, keep in mind that the Blitz is still in development and may change in the future. We are open to suggestions and contributions.</p> <p>The Blitz file is the configuration file used by Blitz to generate the API. It is a simple YAML or JSON file that contains the general configuration of the API and the database models.</p> <p>We are building the Blitz File in a way that it is easy to read and understand with every feature needed to build a complete basic API.</p>"},{"location":"blitzfile/#blitz-file-structure","title":"Blitz File Structure","text":"<p>The Blitz file is composed of two main sections: <code>config</code> and <code>resources</code>.</p>"},{"location":"blitzfile/#config","title":"Config","text":"<p>The config section contains the general configuration of the API. It is built as below:</p> YamlJson <pre><code>config:\n  name: Hello world\n  description: Here is a simple blitz configuration file.\n  version: 0.1.0\n</code></pre> <pre><code>\"config\": {\n    \"name\": \"Hello world\",\n    \"description\": \"Here is a simple blitz configuration file.\",\n    \"version\": \"0.1.0\"\n}\n</code></pre> <p>Pretty easy right ?</p>"},{"location":"blitzfile/#resources","title":"Resources","text":"<p>The <code>resources</code> section contains the structure of the data you want to manipulate in your Blitz app. It's a bit more complex than the config section but still easy to understand.</p> <p>Note</p> <p>We are not talking about <code>database</code> or <code>models</code> here because Blitz is an abstraction of your data model and things that are represented in your Blitz file as a <code>resource</code> may be represented differently in your database.</p> <p>The resources section is built as below:</p> YamlJson <pre><code>resources:\n  TodoList:\n    ...\n  Todo:\n    ...\n</code></pre> <pre><code>\"resources\": {\n    \"TodoList\": {\n        ...\n    },\n    \"Todo\": {\n        ...\n    }\n}\n</code></pre> <p>A <code>name</code> which is the name of the resource and a <code>fields</code> section which contains the fields of the resource.</p> <p>Still pretty easy right ?</p>"},{"location":"blitzfile/#fields","title":"Fields","text":"<p>A field can be constructed in 2 way, the explicit way and the shortcut way.</p> <p>You can use both way in the same Blitz file because as the name says, the shortcut way is just a shortcut to the explicit way.</p> <p>Here is an example of a working Blitz file:</p> YamlJsonYaml (explicit)Json (explicit) <pre><code>resources:\n  TodoList:\n    owner!: str\n    description: str\n  Todo:\n    due_date: str\n    todo_list_id: TodoList.id\n    todo_list: TodoList\n</code></pre> <pre><code>\"resources\": {\n    \"TodoList\": {\n        \"owner!\": \"str\",\n        \"description\": \"str\"\n    },\n    \"Todo\": {\n        \"due_date\": \"str\",\n        \"todo_list_id\": \"TodoList.id\",\n        \"todo_list\": \"TodoList\"\n    }\n}\n</code></pre> <pre><code>resources:\n  TodoList:\n    owner:\n      type: str\n      unique: true\n    description:\n      type: str\n  Todo:\n    due_date:\n      type: str\n    todo_list_id:\n      type: foreign_key\n      relationship: TodoList.id\n    todo_list:\n      type: relationship\n      relationship: TodoList\n</code></pre> <pre><code>\"resources\": {\n    \"TodoList\": {\n        \"owner\": {\n            \"type\": \"str\",\n            \"unique\": true\n        },\n        \"description\": {\n            \"type\": \"str\"\n        }\n    },\n    \"Todo\": {\n        \"due_date\": {\n            \"type\": \"str\"\n        },\n        \"todo_list_id\": {\n            \"type\": \"foreign_key\",\n            \"foreign_key\": \"TodoList.id\"\n        },\n        \"todo_list\": {\n            \"type\": \"relationship\",\n            \"relationship\": \"TodoList\"\n        }\n    }\n}\n</code></pre> <p>Note</p> <p>We will maintain the 4 ways of writing fields in the Blitz file because we think that the explicit way is more readable and the shortcut way is more convenient. We are also about to implement in the Blitz dashboard a way to switch between the 4 ways really easily.</p> <p>Every field is constructed at least with a <code>name</code> and a <code>type</code>.</p>"},{"location":"blitzfile/config/","title":"Config","text":"<p>The config section contains the general informations about your Blitz app. It is built as below:</p> YamlJson <pre><code>config:\n    name: Hello world # (1)!\n    description: Here is a simple blitz configuration file. # (2)!\n    version: 0.1.0 # (3)!\n</code></pre> <ol> <li>The name of your Blitz app.</li> <li>A short description of your Blitz app.</li> <li>The version of your Blitz app.</li> </ol> <pre><code>\"config\": {\n    \"name\": \"Hello world\", // (1)!\n    \"description\": \"Here is a simple blitz configuration file.\", // (2)!\n    \"version\": \"0.1.0\" // (3)!\n}\n</code></pre> <ol> <li>The name of your Blitz app.</li> <li>A short description of your Blitz app.</li> <li>The version of your Blitz app.</li> </ol>"},{"location":"blitzfile/reference/","title":"Blitz file reference","text":"<p>Warning</p> <p>WORK IN PROGRESS</p>"},{"location":"blitzfile/relationships/","title":"Relationships","text":""},{"location":"blitzfile/relationships/#relationship","title":"Relationship","text":"<p>Currently supported relationships are:</p> <ul> <li>One-to-many</li> <li>One-to-one</li> </ul>"},{"location":"blitzfile/relationships/#one-to-many","title":"One-to-Many","text":"<p>A Player has many Items.</p> <p>In the following example, a player has many items</p> YamlJsonYaml (explicit)Json (explicit) <pre><code>Player:\n  name: str\n  items: Item[]\nItem:\n  name: str\n  player_id: Player.id\n  player: Player\n</code></pre> <pre><code>{\n    \"Player\": {\n        \"name\": \"str\",\n        \"items\": \"Item[]\"\n    },\n    \"Item\": {\n        \"name\": \"str\",\n        \"player_id\": \"Player.id\",\n        \"player\": \"Player\"\n    }\n}\n</code></pre> <pre><code>Player:\n  name:\n  type: str\n  items:\n    type: relationship\n    relationship: Item\n    relationship_list: true\nItem:\n  name:\n    type: str\n  player_id:\n    type: foreign_key\n    foreign_key: Player.id\n  player:\n    type: relationship\n    relationship: Player\n</code></pre> <pre><code>{\n    \"Player\": {\n        \"name\": {\n            \"type\": \"str\"\n        },\n        \"items\": {\n            \"type\": \"relationship\",\n            \"relationship\": \"Item\",\n            \"relationship_list\": true\n        }\n    },\n    \"Item\": {\n        \"name\": {\n            \"type\": \"str\"\n        },\n        \"player_id\": {\n            \"type\": \"foreign_key\",\n            \"foreign_key\": \"Player.id\"\n        },\n        \"player\": {\n            \"type\": \"relationship\",\n            \"relationship\": \"Player\"\n        }\n    }\n}\n</code></pre> <p>By specifying the player relationship from the Item entity, we made a <code>Item-&gt;Player</code> relationship where an Item is related to a single Player.</p> <p>Because the Player entity don't have any relationship declared, there is no rules concerning the relationship between <code>Player-&gt;Item</code>.</p> <p>Note</p> <p>As you can see, you can declare a <code>items</code> relationship in the <code>Player</code> resource to make the relationship usable from the <code>Player</code> entity.</p> <p>This is fully optional and it don't do anything about the real relationship between <code>Player</code> and <code>Item</code> because evrything is set in the <code>Item</code> resource, but it allow the <code>Player</code> resource to display the linked <code>Item</code>s resources.</p> <p>Then, one Item belongs to one Player entity and one Player can have multiple Item entities. This is a One to Many relationship.</p>"},{"location":"blitzfile/relationships/#one-to-one","title":"One to One","text":"<p>In the following example, a player has one bank account and a bank has many accounts.</p> YamlJsonYaml (explicit)Json (explicit) <pre><code>Player:\n  name: str\n  account: BankAccount\nBank:\n  name: str\nBankAccount:\n  bank_id: Bank.id\n  bank: Bank\n  player_id!: Player.id\n  player: Player\n</code></pre> <pre><code>{\n    \"Player\": {\n        \"name\": \"str\",\n        \"account\": \"BankAccount\"\n    },\n    \"Bank\": {\n        \"name\": \"str\"\n    },\n    \"BankAccount\": {\n        \"bank_id\": \"Bank.id\",\n        \"bank\": \"Bank\",\n        \"player_id!\": \"Player.id\",\n        \"player\": \"Player\"\n    }\n}\n</code></pre> <pre><code>Player:\n  name:\n    type: str\n  account:\n    type: relationship\n    relationship: BankAccount\nBank:\n  name: str\nBankAccount:\n  bank_id:\n    type: foreign_key\n    foreign_key: Bank.id\n  bank:\n    type: relationship\n    relationship: Bank\n  player_id:\n    type: foreign_key\n    foreign_key: Player.id\n    unique: true\n  player:\n    type: relationship\n    relationship: Player\n</code></pre> <pre><code>{\n    \"Player\": {\n        \"name\": {\n            \"type\": \"str\"\n        },\n        \"account\": {\n            \"type\": \"relationship\",\n            \"relationship\": \"BankAccount\"\n        }\n    },\n    \"Bank\": {\n        \"name\": \"str\"\n    },\n    \"BankAccount\": {\n        \"bank_id\": {\n            \"type\": \"foreign_key\",\n            \"foreign_key\": \"Bank.id\"\n        },\n        \"bank\": {\n            \"type\": \"relationship\",\n            \"relationship\": \"Bank\"\n        },\n        \"player_id\": {\n            \"type\": \"foreign_key\",\n            \"foreign_key\": \"Player.id\",\n            \"unique\": true\n        },\n        \"player\": {\n            \"type\": \"relationship\",\n            \"relationship\": \"Player\"\n        }\n    }\n}\n</code></pre> <p>By specifying the player relationship from the BankAccount entity, we made a <code>BankAccount-&gt;Player</code> relationship where a BankAccount is related to a single Player.</p> <p>Because we also specify the player_id to be unique, The relationship to a player id can only exists once. Then a Player can have only one BankAccount.</p> <p>Note</p> <p>As you can see, you can declare a <code>account</code> relationship in the <code>Player</code> resource to make the relationship usable from the <code>Player</code> entity.</p> <p>This is fully optional and it don't do anything about the real relationship between <code>Player</code> and <code>BankAccount</code> because evrything is set in the <code>BankAccount</code> resource, but it allow the <code>Player</code> resource to display the linked <code>BankAccount</code> resource.</p> <p>Then, one Player has one BankAccount entity and one BankAccount is related to a single Player. This is a One to One relationship.</p>"},{"location":"blitzfile/relationships/#known-issues","title":"Known issues","text":"<ul> <li>Currently you MUST specify a foreign key and a relationship attribute to make it work correctly.</li> </ul>"},{"location":"blitzfile/resources/","title":"Resources","text":""},{"location":"blitzfile/resources/#resources","title":"Resources","text":"<p>The <code>resources</code> section contains your Blitz resources description. It is built as below:</p> YamlJson <pre><code>resources:\n  Book:\n    ...\n</code></pre> <pre><code>\"resources\": {\n    \"Book\": {\n        ...\n    }\n}\n</code></pre> <p>Each resource contains at least a <code>name</code> and a <code>fields</code> section. The <code>name</code> is the name of the resource and the <code>fields</code> section contains the fields of the resource.</p>"},{"location":"blitzfile/resources/#fields","title":"Fields","text":"<p>Note</p> <p>The field section can be constructed in 2 way, the explicit way and the shortcut way. You can use both way in the same Blitz file because as the name says, the shortcut way is just a shortcut to the explicit way.</p> <p>Each field must contain at least a <code>name</code> and a <code>type</code>.</p> <p>The available field types are listed below:</p> Type Description Example <code>str</code> A string <code>Hello world</code> <code>int</code> An integer <code>42</code> <code>float</code> A float <code>3.14</code> <code>bool</code> A boolean <code>true</code> <code>uuid</code> A UUID <code>123e4567-e89b-12d3-a456-42661417</code> <code>datetime</code> A datetime <code>2021-01-01T00:00:00</code> YamlJsonYaml (explicit)Json (explicit) <pre><code>Resource:\n  description: str\n</code></pre> <pre><code>\"Resource\": {\n    \"description\": \"str\"\n}\n</code></pre> <pre><code>Resource:\n  description:\n    type: str\n</code></pre> <pre><code>\"Resource\": {\n    \"description\": {\n        \"type\": \"str\"\n    }\n}\n</code></pre> <p>Note</p> <p>In this example, the name of the field is <code>description</code> and the type is <code>str</code>.</p> <p>Let's have a look with a complete resource and then break it down:</p> YamlJsonYaml (explicit)Json (explicit) <pre><code>resources:\n  Book:\n    title: str! # (1)!\n    identifier!: uuid! # (2)!\n    author: str? # (3)!\n    description: # (4)!\n      type: str\n      default: \"Here is a description\"\n</code></pre> <ol> <li>The field <code>title</code> is required because of the <code>!</code> modifier at the end of the field type (<code>str!</code>). See the required field for more details.</li> <li>The field <code>\u00ecdentifier</code> is unique because of the <code>!</code> modifier at the end of the field name (<code>identifier!</code>). See the unique field for more details. The field <code>identifier</code> is required because of the <code>!</code> modifier at the end of the field type (<code>uuid!</code>). See the required field for more details.</li> <li>The field <code>author</code> is nullable because of the <code>?</code> modifier at the end of the field type (<code>str?</code>). See the nullable field for more details.</li> <li>The field <code>description</code> has a default value because of the <code>default</code> property (<code>default: \"Here is a description\"</code>). See the default value for more details.</li> </ol> <pre><code>\"resources\": {\n    \"Book\": {\n        \"title\": \"str!\", // (1)!\n        \"identifier!\": \"uuid!\", // (2)!\n        \"author\": \"str?\", // (3)!\n        \"description\": { // (4)!\n            \"type\": \"str\",\n            \"default\": \"Here is a description\"\n        }\n    }\n}\n</code></pre> <ol> <li>The field <code>title</code> is required because of the <code>!</code> modifier at the end of the field type (<code>str!</code>). See the required field for more details.</li> <li>The field <code>\u00ecdentifier</code> is unique because of the <code>!</code> modifier at the end of the field name (<code>identifier!</code>). See the unique field for more details. The field <code>identifier</code> is required because of the <code>!</code> modifier at the end of the field type (<code>uuid!</code>). See the required field for more details.</li> <li>The field <code>author</code> is nullable because of the <code>?</code> modifier at the end of the field type (<code>str?</code>). See the nullable field for more details.</li> <li>The field <code>description</code> has a default value because of the <code>default</code> property (<code>\"default\": \"Here is a description\"</code>). See the default value for more details.</li> </ol> <pre><code>resources:\n  Book:\n    title: # (1)!\n      type: str\n      required: true\n    identifier: # (2)!\n      type: uuid\n      unique: true\n    author: # (3)!\n      type: str\n      nullable: true\n    description: # (4)!\n      type: str\n      default: \"Here is a description\"\n</code></pre> <ol> <li>The field <code>title</code> is required because of the <code>required</code> propertry (<code>required: true</code>). See the required field for more details.</li> <li>The field <code>\u00ecdentifier</code> is unique because of the <code>unique</code> property at the end of the field name (<code>unique: true</code>). See the unique field for more details. The field <code>identifier</code> is required because of the <code>required</code> property (<code>required: true</code>). See the required field for more details.</li> <li>The field <code>author</code> is nullable because of the <code>nullable</code> property (<code>nullable: true</code>). See the nullable field for more details.</li> <li>The field <code>description</code> has a default value because of the <code>default</code> property (<code>default: \"Here is a description\"</code>). See the default value for more details.</li> </ol> <pre><code>\"resources\": {\n    \"Book\": {\n        \"title\": { // (1)!\n            \"type\": \"str\",\n            \"required\": true\n        },\n        \"identifier\": { // (2)!\n            \"type\": \"uuid\",\n            \"unique\": true\n        },\n        \"author\": { // (3)!\n            \"type\": \"str\",\n            \"nullable\": true\n        },\n        \"description\": { // (4)!\n            \"type\": \"str\",\n            \"default\": \"Here is a description\"\n        }\n    }\n}\n</code></pre> <ol> <li>The field <code>title</code> is required because of the <code>required</code> propertry (<code>\"required\": true</code>). See the required field for more details.</li> <li>The field <code>\u00ecdentifier</code> is unique because of the <code>unique</code> property at the end of the field name (<code>\"unique\": true</code>). See the unique field for more details. The field <code>identifier</code> is required because of the <code>required</code> property (<code>\"required\": true</code>). See the required field for more details.</li> <li>The field <code>author</code> is nullable because of the <code>nullable</code> property (<code>\"nullable\": true</code>). See the nullable field for more details.</li> <li>The field <code>description</code> has a default value because of the <code>default</code> property (<code>\"default\": \"Here is a description\"</code>). See the default value for more details.</li> </ol>"},{"location":"blitzfile/resources/#unique-field","title":"Unique field","text":"<p>You can specify if a field is unique by adding a <code>!</code> at the end of the field name or by setting the <code>unique</code> property to <code>true</code>.</p> YamlJsonYaml (explicit)Json (explicit) <pre><code>Resource:\n  identifier!: uuid\n</code></pre> <pre><code>\"Resource\": {\n    \"identifier!\": \"uuid\"\n}\n</code></pre> <pre><code>Resource:\n  identifier:\n    type: uuid\n    unique: true\n</code></pre> <pre><code>\"Resource\": {\n    \"identifier\": {\n        \"type\": \"uuid\",\n        \"unique\": true\n    }\n}\n</code></pre>"},{"location":"blitzfile/resources/#nullable-field","title":"Nullable field","text":"<p>You can specify if a field is nullable by adding a <code>?</code> at the end of the field type or by setting the <code>nullable</code> property to <code>true</code>.</p> YamlJsonYaml (explicit)Json (explicit) <pre><code>Resource:\n  author: str?\n</code></pre> <pre><code>\"Resource\": {\n    \"author\": \"str?\"\n}\n</code></pre> <pre><code>Resource:\n  author:\n    type: str\n    nullable: true\n</code></pre> <pre><code>\"Resource\": {\n    \"author\": {\n        \"type\": \"str\",\n        \"nullable\": true\n    }\n}\n</code></pre> <p>The default value will be set to <code>null</code> if the field is nullable. If you want to specify another default value, you can use the <code>default</code> property.</p>"},{"location":"blitzfile/resources/#required-field","title":"Required field","text":"<p>You can specify if a field is required by adding a <code>!</code> at the end of the field type or by setting the <code>required</code> property to <code>true</code>.</p> YamlJsonYaml (explicit)Json (explicit) <pre><code>Resource:\n  title: str!\n</code></pre> <pre><code>\"fields\": {\n    \"title\": \"str!\"\n}\n</code></pre> <pre><code>Resource:\n  title:\n    type: str\n    required: true\n</code></pre> <pre><code>\"Resource\": {\n    \"title\": {\n        \"type\": \"str\",\n        \"required\": true\n    }\n}\n</code></pre>"},{"location":"blitzfile/resources/#default-value","title":"Default value","text":"No shortcut yet <p>There is no shortcut yet for the <code>default</code>property.</p> <p>You can specify a default value for a field by setting the <code>default</code> property to the value you want.</p> YamlJson <pre><code>Resource:\n  description:\n    type: str\n    default: \"Here is a description\"\n</code></pre> <pre><code>\"Resource\": {\n    \"description\": {\n        \"type\": \"str\",\n        \"default\": \"Here is a description\"\n    }\n}\n</code></pre>"},{"location":"cli/clone/","title":"Clone","text":"<p>With clone you can create a new Blitz project from a Blitz App running on a remote server.</p> <p>A Blitz App can expose the <code>/blitz-file</code> endpoint which is the Blitz file of the current running Blitz App.</p> <p>Tip</p> <p>You can desactivate this feature with  <code>blitz start --no-config-route</code> option.</p> <p>You can try it with the demo: <pre><code>blitz clone https://demo.blitz.paperz.app/blitz-file\n</code></pre></p> <pre><code>$ blitz clone https://demo.blitz.paperz.app/blitz-file\n\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;Demo Blitz App&lt;/span&gt; created successfully !\nTo start your app, you can use:\n    &lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;blitz start demo-blitz-app&lt;/span&gt;\n</code></pre>"},{"location":"cli/create/","title":"Create","text":"<p>The <code>blitz create</code> command is used to create a new blitz app. It will ask you for the name of your app, the description of your app and the format of the blitz file.</p> <p>The default format is <code>yaml</code>. You can also use <code>json</code> format.</p> <pre><code>$ blitz create your-blitz-app\nEnter the description of your blitz app ():\n// this is my first blitz app\nChoose the format of the blitz file [json/yaml] (yaml):\n// yaml\n\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;your-blitz-app&lt;/span&gt; created successfully !\nTo start your app, you can use:\n    &lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;blitz start your-blitz-app&lt;/span&gt;\n</code></pre> <p>Tip</p> <p>You can also use <code>--demo</code> to create an already configured blitz app with some resources and relationships.</p> <pre><code>$ blitz create --demo\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;Demo Blitz App&lt;/span&gt; created successfully !\nTo start your app, you can use:\n    &lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;blitz start demo-blitz-app&lt;/span&gt;\n\n$ blitz start demo-blitz-app\n&lt;span style=\"color: yellow; font-weight: bold;\"&gt;This is still an alpha. Please do not use in production.&lt;/span&gt;\n&lt;span style=\"color: yellow; font-weight: bold;\"&gt;Please report any issues on https://github.com/Paperz-org/blitz&lt;/span&gt;\n\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;Blitz app deployed.&lt;/span&gt;\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;  - Blitz UI            : &lt;a style=\"cursor: pointer\" href=\"http://0.0.0.0:8100\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;http://0.0.0.0:8100&lt;/a&gt;&lt;/span&gt;\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;  - Blitz admin         : &lt;a style=\"cursor: pointer\" href=\"http://0.0.0.0:8100/admin\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;http://0.0.0.0:8100/admin&lt;/a&gt;&lt;/span&gt;\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;  - Swagger UI          : &lt;a style=\"cursor: pointer\" href=\"http://0.0.0.0:8100/api/docs\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;http://0.0.0.0:8100/api/docs&lt;/a&gt;&lt;/span&gt;\n\n&lt;span style=\"color: lightblue; font-weight: bold;\"&gt;INFO&lt;/span&gt;      demo-blitz-app Started server process [21292026]\n&lt;span style=\"color: lightblue; font-weight: bold;\"&gt;INFO&lt;/span&gt;      demo-blitz-app Waiting for application startup.\n&lt;span style=\"color: lightblue; font-weight: bold;\"&gt;INFO&lt;/span&gt;      demo-blitz-app Application startup complete.\n</code></pre> <p>Note</p> <p>Use <code>blitz create --help</code> to see all available options.</p>"},{"location":"cli/list/","title":"List","text":"<pre><code>$ blitz list\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Blitz app name    \u2503 Version \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 another-blitz-app \u2502 0.0.0   \u2502\n\u2502 random-blitz-app  \u2502 0.1.0   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Note</p> <p>Use <code>blitz list --help</code> to see all available options.</p>"},{"location":"cli/references/","title":"app","text":"<p>Usage:</p> <pre><code>callback [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --version             Show the Blitz version.\n  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n</code></pre>"},{"location":"cli/references/#clone","title":"clone","text":"<p>Usage:</p> <pre><code>callback clone [OPTIONS] URL\n</code></pre> <p>Options:</p> <pre><code>  URL                   URL of the project  [required]\n  --force / --no-force  Don't check the URL validity  [default: no-force]\n  --name TEXT           Name of the project\n  --format TEXT         Format of the project  [default: yaml]\n</code></pre>"},{"location":"cli/references/#create","title":"create","text":"<p>Usage:</p> <pre><code>callback create [OPTIONS] [BLITZ_APP_NAME]\n</code></pre> <p>Options:</p> <pre><code>  [BLITZ_APP_NAME]    The name of the blitz app you want to create\n  --demo / --no-demo  Create a demo blitz app  [default: no-demo]\n</code></pre>"},{"location":"cli/references/#list","title":"list","text":"<p>Usage:</p> <pre><code>callback list [OPTIONS]\n</code></pre>"},{"location":"cli/references/#release","title":"release","text":"<p>Usage:</p> <pre><code>callback release [OPTIONS] [BLITZ_APP_NAME]\n</code></pre> <p>Options:</p> <pre><code>  [BLITZ_APP_NAME]      Blitz app to release\n  --force / --no-force  Force the release even if no changes are detected\n                        [default: no-force]\n  --patch / --no-patch  Release level patch  [default: no-patch]\n  --minor / --no-minor  Release level minor  [default: no-minor]\n  --major / --no-major  Release level major  [default: no-major]\n</code></pre>"},{"location":"cli/references/#start","title":"start","text":"<p>Usage:</p> <pre><code>callback start [OPTIONS] [BLITZ_APP_NAME]\n</code></pre> <p>Options:</p> <pre><code>  [BLITZ_APP_NAME]                Blitz app name\n  --admin / --no-admin            Don't create admin.  [default: admin]\n  --port INTEGER                  Define the port of the server  [default:\n                                  8100]\n  --config-route / --no-config-route\n                                  Enable the blitz config route.  [default:\n                                  config-route]\n  --hot-reload / --no-hot-reload  Enable the hot reload.  [default: hot-\n                                  reload]\n  --version TEXT                  Define the version of the app.\n  --url TEXT                      URL of the project\n</code></pre>"},{"location":"cli/references/#swagger","title":"swagger","text":"<p>Usage:</p> <pre><code>callback swagger [OPTIONS] [BLITZ_APP_NAME]\n</code></pre> <p>Options:</p> <pre><code>  [BLITZ_APP_NAME]      Blitz app name\n  --resource-name TEXT  The resource name\n  --version TEXT        Define the version of the app.\n</code></pre>"},{"location":"cli/release/","title":"Release","text":"<pre><code>$ blitz release random-blitz-app minor\nBlitz app random-blitz-app released at version 0.1.0\nYou can now start your versioned blitz app by running:\n    &lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;blitz start random-blitz-app --version 0.1.0&lt;/span&gt;\n</code></pre> <p>Note</p> <p>Use <code>blitz release --help</code> to see all available options.</p>"},{"location":"cli/start/","title":"Start","text":"<p>The <code>blitz start</code> command is used to start an existing Blitz App. It will start the Blitz API, the blitz admin and the blitz UI.</p> <pre><code>$ blitz start your-blitz-app\n\n&lt;span style=\"color: yellow; font-weight: bold;\"&gt;This is still an alpha. Please do not use in production.&lt;/span&gt;\n&lt;span style=\"color: yellow; font-weight: bold;\"&gt;Please report any issues on https://github.com/Paperz-org/blitz&lt;/span&gt;\n\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;Blitz app deployed.&lt;/span&gt;\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;  - Blitz UI            : &lt;a style=\"cursor: pointer\" href=\"http://0.0.0.0:8100\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;http://0.0.0.0:8100&lt;/a&gt;&lt;/span&gt;\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;  - Blitz admin         : &lt;a style=\"cursor: pointer\" href=\"http://0.0.0.0:8100/admin\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;http://0.0.0.0:8100/admin&lt;/a&gt;&lt;/span&gt;\n&lt;span style=\"color: #af87ff; font-weight: bold;\"&gt;  - Swagger UI          : &lt;a style=\"cursor: pointer\" href=\"http://0.0.0.0:8100/api/docs\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;http://0.0.0.0:8100/api/docs&lt;/a&gt;&lt;/span&gt;\n\n&lt;span style=\"color: lightblue; font-weight: bold;\"&gt;INFO&lt;/span&gt;      random-blitz-app Started server process [21292026]\n&lt;span style=\"color: lightblue; font-weight: bold;\"&gt;INFO&lt;/span&gt;      random-blitz-app Waiting for application startup.\n&lt;span style=\"color: lightblue; font-weight: bold;\"&gt;INFO&lt;/span&gt;      random-blitz-app Application startup complete.\n</code></pre> <p>Note</p> <p>Use <code>blitz create --help</code> to see all available options.</p>"},{"location":"cli/start/#-url","title":"--url","text":"<p>With the <code>--url</code> option, you can start a Blitz App directly from a remote server Blitz File exposed on the <code>/blitz-file</code> route.</p> <p>You can try it with the demo: <pre><code>blitz start --url https://demo.blitz.paperz.app/blitz-file\n</code></pre></p> <p>Tips</p> <p>You can clone the project locally with the clone command</p>"},{"location":"dashboard/","title":"Overview","text":"<p>Blitz has a native dashboard and an admin.</p> <p>You can test it in our Live Demo</p>"},{"location":"dashboard/#main-features","title":"Main features","text":"<ul> <li>Swagger UI: You can interect with the swagger ui directly in the Blitz Dashboard.</li> <li>Blitz File Editor: The dashboard provides users with direct access to the Blitz file, allowing them to make instantaneous modifications as needed.</li> <li>Panel Admin Data Management: Interface for managing database resources, ensuring efficient organization, manipulation, and retrieval of data</li> <li>Dynamic Blitz File Generation: Utilizing GPT capabilities, users can prompt the system to generate new Blitz files on demand, streamlining the process of creating and updating Blitz files.</li> <li>Mermaid Diagram Visualization</li> <li>Log Visualization.</li> </ul>"},{"location":"dashboard/admin/","title":"Admin","text":"<p>The admin is provided by Starlette Admin</p> <p>Check the admin from the Live Demo.</p>"},{"location":"dashboard/blitz_file/","title":"Blitz File Editor","text":"<p>The Dashboard has a Blitz file editor (only JSON for now) to directly create or update your resources.</p> <p>You can test our Blitz file editor in the Live Demo.</p>"},{"location":"dashboard/diagram/","title":"Diagram","text":"<p>The demo diagram is available here.</p>"},{"location":"dashboard/gpt_builder/","title":"GPT Builder","text":"<p>You can chat with GPT to create or improve Blitz file.</p> <p>You have to set an OpenAI API Key in the settings (or as environment variable for local projects).</p> <p>We will automaticly detect valid Blitz File and you will be able to copy to clipboard or download in yaml or Json.</p> <p>You can chat with our builder in the Live Demo.</p> <p>Features:</p> <ul> <li>Detect valid and invalid Blitz files.</li> <li>Change or update the pre-prompt, to provide your context and your needs to GPT.</li> <li>Choose between GPT 3.5 turbo and GPT 4.</li> </ul>"},{"location":"dashboard/logs/","title":"Logs","text":"<p>The log page of the dashboard is always in WIP.</p> <p>The demo version is anonymised.</p> <p>Run the blitz demo locally to see more.</p>"},{"location":"dashboard/swagger/","title":"Swagger","text":"<p>You can interact with the swagger directly inside the Blitz Dashboard.</p> <p>You can play with the Swagger from the Live Demo.</p>"}]}